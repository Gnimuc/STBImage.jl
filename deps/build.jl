using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libstbimage"], :libstbimage),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/STBImageBuilder/releases/download/v1.0.0+2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/stb_image.v1.0.0.aarch64-linux-gnu.tar.gz", "57209d716b6e2aab4beb22c619a1c2b425ea1253325a077d427dec5915c675da"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/stb_image.v1.0.0.aarch64-linux-musl.tar.gz", "ecb2ae8b974f8757cb2625db69f24485a829d16997b73528a86d2d34129fe4d0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/stb_image.v1.0.0.arm-linux-gnueabihf.tar.gz", "71cebb14dd638e2e2424a18bb7f2dce0b954f9f80ae6abbfc7624bba276cb968"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/stb_image.v1.0.0.arm-linux-musleabihf.tar.gz", "77df5435534512785ae087fee7f0e3e644a4201062b6da8e9d72ecd7b2524ea6"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/stb_image.v1.0.0.i686-linux-gnu.tar.gz", "08451695a794efcc83f86ee0e168aa46254fed6290c78a8ad5cefdd6e51cae8c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/stb_image.v1.0.0.i686-linux-musl.tar.gz", "b8754760cec6cd536d9a8da392b7868f58dbe9a927c6914589dd5fcc4826d658"),
    Windows(:i686) => ("$bin_prefix/stb_image.v1.0.0.i686-w64-mingw32.tar.gz", "d14888667a50420048561c4a938feea8d33cbbc1a5624b9403034a7725d436e3"),
    MacOS(:x86_64) => ("$bin_prefix/stb_image.v1.0.0.x86_64-apple-darwin14.tar.gz", "b37157c77dddc7d5294b952f7641e57d316cff1febcb86a9abccad55334b2246"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/stb_image.v1.0.0.x86_64-linux-gnu.tar.gz", "931372b1e9c4071677bb0a36d3692ea76d6d34a5811f8b29394f5a29d70933ae"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/stb_image.v1.0.0.x86_64-linux-musl.tar.gz", "47baf1958ca10821896e22b3def2c2e1c61065ee1b355ace95c6c6e132e4ac68"),
    FreeBSD(:x86_64) => ("$bin_prefix/stb_image.v1.0.0.x86_64-unknown-freebsd11.1.tar.gz", "ae9d30d1377ec2267c95b03539af1c9ef0ee8179fc2d408356a3b854160c4592"),
    Windows(:x86_64) => ("$bin_prefix/stb_image.v1.0.0.x86_64-w64-mingw32.tar.gz", "ec32cbcce1f8ecd45e186436354365c14382aae45e1eafe29d9105b76c760491"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
