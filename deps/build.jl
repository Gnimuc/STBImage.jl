using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libstbimage"], :libstbimage),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/STBImageBuilder/releases/download/v2.23.0-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/stb_image.v2.23.0.aarch64-linux-gnu.tar.gz", "106ba6e362b9b57761ff680be04309f221e83276439d96478d5c01280062d07c"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/stb_image.v2.23.0.aarch64-linux-musl.tar.gz", "9d4bf6edeeb6653e5fc150419877d1e9f984ea2d5a4e27e50ed4390ffd4e10e4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/stb_image.v2.23.0.arm-linux-gnueabihf.tar.gz", "4cf504ca6c0de8094774d3d6659485e0a2fba92db26696dffa39fc15d20a1c29"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/stb_image.v2.23.0.arm-linux-musleabihf.tar.gz", "01e3aa56cf40096d7f1ab962311c9e3a3404f738c00df4cc1bd1c2e9a8372e2a"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/stb_image.v2.23.0.i686-linux-gnu.tar.gz", "67ae8eadcdb0f546c44830dee97c21cee2afd9497283221db322e2fc7efbc922"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/stb_image.v2.23.0.i686-linux-musl.tar.gz", "5ab4aa7e81a67c2cdfd10453c6a8fa7c598cc8c8fdcdcfec89277a0c4ad14e6f"),
    Windows(:i686) => ("$bin_prefix/stb_image.v2.23.0.i686-w64-mingw32.tar.gz", "a4763336b1c0b8f3237613b88b11085efe57761a1443d72d5a769312f75843ba"),
    MacOS(:x86_64) => ("$bin_prefix/stb_image.v2.23.0.x86_64-apple-darwin14.tar.gz", "bc81f0c517426d85ffbebca2929e4c18d9666a3feadba934d2d40d8753fd21df"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/stb_image.v2.23.0.x86_64-linux-gnu.tar.gz", "d5996fef32606d11410a6ba047f3629a4cbc9a3f894f476a6fceb87c4a4a22e1"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/stb_image.v2.23.0.x86_64-linux-musl.tar.gz", "44aa1f4758b2a15f4465dcd72636a4e5a2273281ecdee9b7edfdf5b562584d10"),
    FreeBSD(:x86_64) => ("$bin_prefix/stb_image.v2.23.0.x86_64-unknown-freebsd11.1.tar.gz", "8832d7716da30a9daeecd7fe04fd25d189f1f752c585fa38ac4d537deff3f458"),
    Windows(:x86_64) => ("$bin_prefix/stb_image.v2.23.0.x86_64-w64-mingw32.tar.gz", "ea1fe90bbc7db6bba452dad6fef5645da939c81e57b12da7b970692fd136be43"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
